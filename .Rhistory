### Run methods
# EpiEstim
epiestim <- run_epiestim(d, p1 = sid_covid_mean, p2 = sid_covid_sd)
plot(epiestim$`Median(R)`)
# PLS
loocv <- CV(d$iwt, d$y)
plot(loocv$scores)
plot(loocv$lambdas)
source("model/pls/ridge.R")
loocv <- CV(d$iwt, d$y)
loocv
plot(loocv$lambdas)
c(1,2,3,4,5)[-2]
loocv <- CV(d$iwt, d$y)
ridge <- get_r(d$iwt, d$y, lambda = loocv$lambdas[1])
plot(ridge)
get_loss(d$iwt, d$y, ridge, loocv$lambdas[1])
identity(2)
source("model/pls/penalties_smooth.R")
ridge_obj <- function(data, par, loss_func, iwt = iwt, smooth_func, penalties, pen_func = log, ...){
dat_length = nrow(data)
loss = loss_func(z=data$y, iwt = iwt, r = par)
r_pen <- penalties$r* smooth_func(par)
obj_value = sum(loss+r_pen)
return(obj_value)
}
run_ridge_pls <- function(data, lambda){
### Initialize
dat_length = length(data$y)
r = rep(1, dat_length)
nlm(f=ridge_obj, p = init_r, iterlim =2000, print.level = 0, data=data, penalties = list("r"=lambda),
loss_func = normal_loss, smooth_func = r_smooth_penalty, iwt = data$iwt)
}
source("model/pls/penalties_smooth.R")
ridge_obj <- function(data, par, loss_func, iwt = iwt, smooth_func, penalties, pen_func = identity, ...){
dat_length = nrow(data)
loss = loss_func(z=data$y, iwt = iwt, r = par)
r_pen <- penalties$r* smooth_func(par)
obj_value = sum(loss+r_pen)
return(obj_value)
}
run_ridge_gd <- function(data, lambda){
### Initialize
dat_length = length(data$y)
r = rep(1, dat_length)
nlm(f=ridge_obj, p = init_r, iterlim =2000, print.level = 0, data=data, penalties = list("r"=lambda),
loss_func = normal_loss, smooth_func = r_smooth_penalty, iwt = data$iwt)
}
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
library("tidyverse")
library("dplyr")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing Rt estimation pacakges
library(EpiEstim)
source("run/run_EpiEstim.R")
source("model/pls/ridge.R")
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
source("model/pls/penalties_smooth.R")
ridge_obj <- function(data, par, loss_func, iwt = iwt, smooth_func, penalties, pen_func = identity, ...){
dat_length = nrow(data)
loss = loss_func(z=data$y, iwt = iwt, r = par)
r_pen <- penalties$r* smooth_func(par)
obj_value = sum(loss+r_pen)
return(obj_value)
}
run_ridge_gd <- function(data, lambda){
### Initialize
dat_length = length(data$y)
init_r = rep(1, dat_length)
nlm(f=ridge_obj, p = init_r, iterlim =2000, print.level = 0, data=data, penalties = list("r"=lambda),
loss_func = normal_loss, smooth_func = r_smooth_penalty, iwt = data$iwt)
}
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
loocv$lambdas[1]
loocv
### Function: Build the n-1 by n difference matrix
build_D <- function(dat_length){
D = diag(dat_length)
D[row(D) == col(D)-1] = -1
D = D[1:(nrow(D)-1),]
return(D)
}
### Function: calculate ridge regression from closed-form solution
### Input: vector of iwt and incidence
### Return: Rt estimate
get_r <- function(W, Y, lambda=10){
dat_length = length(Y)
D = build_D(dat_length)
W = diag(W)
return(solve((t(W)%*%W-lambda*t(D)%*%D))%*%t(W)%*%Y)
}
### Get Loss function value
get_loss <- function(W, Y, r, lambda){
dat_length = length(Y)
D = build_D(dat_length)
W = diag(W)
loss = sum((Y-W%*%r)^2/dat_length) + lambda*sum((D%*%r)^2)
return(loss)
}
### Function:
### To be able to call this directly, dat_length, W, D, I has to be
### initialized every time
# get_score <- function(W, Y, lambda){
#
#   dat_length = length(Y)
#   W = diag(W)
#   D = build_D(dat_length)
#   I = diag(rep(1, dat_length))
#
#
#   L = solve((t(W)%*%W-lambda*t(D)%*%D))%*%t(W)
#   H = I-t(L)%*%W
#   H_tilde = diag(diag(H))
#   HHY = H%*%solve(H_tilde)%*%Y
#   E_cv = 1/(dat_length)*sum(HHY^2)
#
#   return(E_cv)
# }
### Function: get hat matrix
### H = W'(W'W+lam*D'D)W
get_hat <- function(W, D, lambda){
H = W %*% solve(t(W)%*%W + lambda*t(D)%*%D)%*%t(W)
return(H)
}
get_score <- function(W, Y, D, I, lambda){
H = get_hat(W, D, lambda)
I = diag(nrow(H))
score = sum((((I-H)%*%Y)/(1-diag(H)))^2)
return(score)
}
### Function: LOOCV for ridge regression
### Input: vector of iwt and incidence
### Return: score and lambda from best (lowest score) to worst
CV <- function(W, Y, lambdas = exp(seq(0.1,10,0.2))){
### Formatting data
dat_length = length(Y)
W = diag(W)
D = build_D(dat_length)
I = diag(dat_length)
### Get grid of lambda
cv_scores = c()
## Loop through all possible lambdas
for (lambda in lambdas){
E_cv = get_score(W, Y, D, I, lambda)
cv_scores = c(cv_scores, E_cv)
}
## Sort the lambda based on size of cv_scores
output = list()
ordered = order(cv_scores)
lambdas = lambdas[ordered]
### Return data frame of sorted cv_scores and lambdas
return(data.frame(scores = cv_scores[ordered], lambdas = lambdas[ordered]))
}
source("model/pls/penalties_smooth.R")
ridge_obj <- function(data, par, loss_func, iwt = iwt, smooth_func, penalties, pen_func = identity, ...){
dat_length = nrow(data)
loss = loss_func(z=data$y, iwt = iwt, r = par)
r_pen <- penalties$r* smooth_func(par)
obj_value = sum(loss+r_pen)
return(obj_value)
}
run_ridge_gd <- function(data, lambda){
### Initialize
dat_length = length(data$y)
init_r = rep(1, dat_length)
nlm(f=ridge_obj, p = init_r, iterlim =2000, print.level = 0, data=data, penalties = list("r"=lambda),
loss_func = normal_loss, smooth_func = r_smooth_penalty, iwt = data$iwt)
}
library("tidyverse")
library("dplyr")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing Rt estimation pacakges
library(EpiEstim)
source("run/run_EpiEstim.R")
source("model/pls/ridge.R")
### Importing data, no cyclic effect
d = read.csv("data/processed/d2.csv")
plot(d$y, type = "l")
plot(d$r, type = "l")
### Run methods
# EpiEstim
epiestim <- run_epiestim(d, p1 = sid_covid_mean, p2 = sid_covid_sd)
plot(epiestim$`Median(R)`)
# PLS
loocv <- CV(d$iwt, d$y)
ridge <- get_r(d$iwt, d$y, lambda = loocv$lambdas[1])
plot(ridge)
get_loss(d$iwt, d$y, ridge, loocv$lambdas[1])
# NLP GD
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
ridge_gd$code
plot(ridge_gd$estimate)
get_loss(d$iwt, d$y, ridge, loocv$lambdas[1])
plot(ridge_gd$estimate)
plot(ridge)
plot(ridge_gd$estimate)
get_loss(d$iwt, d$y, ridge_gd, loocv$lambdas[1])
get_loss(d$iwt, d$y, ridge_gd$estimate, loocv$lambdas[1])
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
plot(ridge_gd$estimate)
ridge_gd$code
ridge_gd$minimum
ridge_gd$iterations
source("model/pls/penalties_smooth.R")
ridge_obj <- function(data, par, loss_func, iwt = iwt, smooth_func, penalties, pen_func = identity, ...){
dat_length = nrow(data)
loss = loss_func(z=data$y, iwt = iwt, r = par)
r_pen <- penalties$r* smooth_func(par)
obj_value = sum(loss+r_pen)
return(obj_value)
}
run_ridge_gd <- function(data, lambda){
### Initialize
dat_length = length(data$y)
init_r = rep(1, dat_length)
nlm(f=ridge_obj, p = init_r, iterlim =5000, print.level = 0, data=data, penalties = list("r"=lambda),
loss_func = normal_loss, smooth_func = r_smooth_penalty, iwt = data$iwt)
}
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
plot(ridge_gd$estimate)
get_loss(d$iwt, d$y, ridge_gd$estimate, loocv$lambdas[1])
get_loss(d$iwt, d$y, ridge, loocv$lambdas[1])
plot(ridge)
plot(d$r, type = "l")
plot(epiestim$`Median(R)`)
plot(ridge)
plot(ridge_gd$estimate)
library("pomp")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
### Transition equation
tran <- discrete_time(
function(x, s, sdlog, ...){
snext <- rlnorm(1, meanlog = log(s), sdlog = sdlog)
xnext <- rlnorm(1, meanlog = log(x), sdlog = snext)
c(x = xnext, s = snext)
},
delta.t = 1
)
### Observation equation
meas_pois_interval <- function(t, x, s, T, Y, y, g_shape, g_scale, ..., log){
if(t > 1){
lambda = x[1] * sum(Y[(t-1):1] * disc_gamma(1:(t-1), shape = g_shape, scale = g_scale))
y*log(lambda)-lambda
}else{
dpois(round(y), lambda = 1)
}
}
### Run particle filter
run_pf <- function(d){
init_vals = c(sdlog = 0.1,
g_shape = sid_covid_shape, g_scale = sid_covid_scale)
pf <- pfilter(
Np=1000,
times = "idx",
t0 = 1,
data = d,
params = init_vals,
rinit = function(x0, ...){c(x=1, s = 0.05)},
rprocess = tran,
dmeasure = meas_pois_interval,
T=t,
Y = d$y,
statenames = c("x"),
filter.mean = TRUE,
filter.traj = TRUE,
# pred.mean = TRUE,
# pred.var = TRUE,
)
result = as.data.frame(pf)
return(result)
}
### Synthetic data import
# d4<- read.csv("data/processed/d4.csv")
# plot(d4$y)
# plot(d4$r)
### Initial values
# init_vals = c(sdlog = 0.1,
#               g_shape = sid_covid_shape, g_scale = sid_covid_scale)
### Run particle filter default
# pf <- pfilter(
#   Np=1000,
#   times = "idx",
#   t0 = 1,
#   data = d4,
#   params = init_vals,
#   rinit = function(x0, ...){c(x=1, s = 0.05)},
#   rprocess = tran,
#   dmeasure = meas_pois_interval,
#   T=t,
#   Y = d4$y,
#   statenames = c("x", "s"),
#   filter.mean = TRUE,
#   filter.traj = TRUE,
#   # pred.mean = TRUE,
#   # pred.var = TRUE,
# )
# plot(pf)
#
# result = as.data.frame(pf)
#
#
# ### Make comparison plot
# diag_pf = diag_plots(d4$r, result$r, d4$iwt, d4$y, cap=0)
#
# diag_pf$rt
#
# diag_pf$oneday
#
# ggplot(data=data.frame(idx = d4$idx, true= d4$r, pred = result$filter.mean.x), aes(x=idx))+
#   geom_line(aes(x = idx, y = true), color="blue")+
#   geom_line(aes(x=idx, y = pred), color = "red")+
#   theme_bw()
#
#
# plot(result$filter.mean.s, type = "l")
source("run/run_pf_all.R")
pf <- run_pf(d)
plot(pf$r)
plot(pf$filter.mean.x)
library("EpiNow2")
source("constant/constant.R")
source("function/make_plot.R")
d <- read.csv("data/processed/d2.csv")
library("EpiNow2")
source("constant/constant.R")
source("function/make_plot.R")
run_epinow <- function(data, p1, p2){
data_size <- nrow(data)
rdate <- data.frame(date =read.csv("data/processed/rdate.csv"))
rdate <- rdate$x[1:data_size]
generation_time = list(mean = p1, mean_sd = 0.01, sd = p2, sd_sd = 0.01, max=30)
result_a <- epinow(reported_cases = data.frame(date = as.Date(rdate), confirm=data$y),
generation_time = generation_time,
rt = rt_opts(prior=list(mean=1.5, sd=3)),
stan = stan_opts(cores=4, samples = 1000))
return(result_a)
}
d <- read.csv("data/processed/d2.csv")
epinow <- run_epinow(d, sid_covid_mean, sid_covid_sd)
# true_r1 <- sim_a$r
# pred_r1 <- run_epinow(sim_a, sid_ebola_mean, sid_ebola_sd)
# compare1 <- compare_rt(true_r1, pred_r1)
# ggsave("a.png",plot = compare1, path = "plot/epinow")
epinow$summary
epinow$estimated_reported_cases
plot(epinow)
plot(epinow$estimates)
plot(epinow$estimates$summarised$median)
plot(epinow$estimates$summarised$upper_90)
s <- summary(epinow)
s
head(s)
head(summary(epinow, type = "parameters", params = "R"))
plot(summary(epinow, type = "parameters", params = "R")$median)
ggsave("epinow_d2.png", plot =plot(summary(epinow, type = "parameters", params = "R")$median),
path = "plot/epinow")
write.csv(summary(epinow, type = "parameters", params = "R"), file = "data/results/epinow2_d2")
Sys.Date()
Sys.time()
"ddd" + Sys.time() + "dfdf"
paste("dddd", Sys.time(), "dfadfd")
file.path("..", "data", Sys.time())
file.path("..", "data", "processed", Sys.time(), "d1.csv")
write.csv(summary(epinow, type = "parameters", params = "R"), file = "data/results/epinow2_d2.csv")
epin <- read.csv("data/results/epinow2_d2.csv")
plot(epin$median)
epinow$summary
summary(epinow)
View(epinow)
summary(epinow, type = "parameters", params="R")
View(acm_r)
acm_r <- function(true_r, pred_r){
plot <- ggplot(data.frame(idx=1:length(true_r), true = true_r, pred = pred_r), aes=(x=idx))+
stat_ecdf(aes(x=idx, y = true), color="blue")+
stat_ecdf(aes(x=idx, y = pred), color="red")+
theme_bw()+
xlab("Cumulated R")+
ylab("Time")
return(plot)
}
library("tidyverse")
library("dplyr")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing Rt estimation pacakges
library(EpiEstim)
source("run/run_EpiEstim.R")
source("model/pls/ridge.R")
source("run/run_pf_all.R")
### Importing data, no cyclic effect
d = read.csv("data/processed/d2.csv")
plot(d$y, type = "l")
plot(d$r, type = "l")
### Run methods
# EpiEstim
epiestim <- run_epiestim(d, p1 = sid_covid_mean, p2 = sid_covid_sd)
plot(epiestim$`Median(R)`)
# PLS
loocv <- CV(d$iwt, d$y)
ridge <- get_r(d$iwt, d$y, lambda = loocv$lambdas[1])
plot(ridge)
get_loss(d$iwt, d$y, ridge, loocv$lambdas[1])
# NLP GD
ridge_gd <- run_ridge_gd(d, loocv$lambdas[1])
plot(ridge_gd$estimate)
get_loss(d$iwt, d$y, ridge_gd$estimate, loocv$lambdas[1])
# Particle Filter
pf <- run_pf(d)
plot(pf$filter.mean.x)
# EpiNow
epin <- read.csv("data/results/epinow2_d2.csv")
plot(epin$median)
loocv$lambdas[1]
plot(ridge_gd$estimate)
plot(ridge)
ridge <- get_r(d$iwt, d$y, lambda = 10)
plot(ridge)
ridge <- get_r(d$iwt, d$y, lambda = 20)
plot(ridge)
ridge <- get_r(d$iwt, d$y, lambda = 50)
plot(ridge)
ridge <- get_r(d$iwt, d$y, lambda = 1000)
plot(ridge)
get_loss(d$iwt, d$y, ridge, loocv$lambdas[1])
loocv$scores
loocv$lambdas
diff(loocv$lambdas)
loocv$lambdas[1]
knitr::opts_chunk$set(echo = TRUE)
dat_length = 100
sd = 2
lambda = 2
x <- 1:dat_length
y <- 2*x + rnorm(dat_length, 0, sd = sd)
plot(y)
source("../model/pls/ridge.R")
fit_close <- get_r(x, y, lambda=lambda)
plot(fit_close)
x = diag(x)
D = build_D(dat_length)
plot(solve(t(x)%*%x+lambda*t(D)%*%D)%*%t(x)%*%y)
cv_result <- CV(x, y)
x
loss <- function(w, i, r){
return(sum((i-w*r))^2)
}
penalty <- function(r){
return(sum(diff(r)^2))
}
obj <- function(w, i, par, lambda){
o <- loss(w, i, r) + lambda*penalty(r)
return(o)
}
result = nlm(f=obj, p = rep(1, dat_length), iterlim =5000, print.level = 0, w=x, i = y, lambda = lambda)
loss <- function(w, i, r){
return(sum((i-w*r))^2)
}
penalty <- function(r){
return(sum(diff(r)^2))
}
obj <- function(w, par, i , lambda){
o <- loss(w, i, par) + lambda*penalty(par)
return(o)
}
result = nlm(f=obj, p = rep(1, dat_length), iterlim =5000, print.level = 0, w=x, i=y, lambda = lambda)
result
plot(result$estimate)
?nlm
loss <- function(w, i, r){
return(sum((i-w*r))^2)
}
penalty <- function(r){
return(sum(diff(r)^2))
}
obj <- function(w, par, i , lambda){
o <- loss(w, i, par) + lambda*penalty(par)
return(o)
}
result = nlm(f=obj, p = rep(1, dat_length), iterlim =5000, print.level = 0, w=x, i=y, lambda = lambda)
plot(result$estimate)
loss <- function(w, i, r){
return(sum((i-w*r))^2)
}
penalty <- function(r){
return(sum(diff(r)^2))
}
obj <- function(w, par, i , lambda){
o <- loss(w, i, par) + lambda*penalty(par)
return(o)
}
result = nlm(f=obj, p = rep(1, dat_length), iterlim =3000, print.level = 0, w=x, i=y, lambda = lambda)
plot(result$estimate)
---
title: "Nov03"
obj <- function(x, y, par, lambda){
return(sum((y-par*x)^2) + lambda*sum(diff(par)^2))
}
result = nlm(obj, p = rep(1, dat_length), y = y, lambda = 2)
obj <- function(x, y, p, lambda){
return(sum((y-p*x)^2) + lambda*sum(diff(p)^2))
}
result = nlm(obj, p = rep(1, dat_length), y = y, lambda = 2)
