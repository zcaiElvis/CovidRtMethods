?nlm
knitr::opts_chunk$set(echo = TRUE)
source("../model/pls/ridge.R")
source("../model/pls/penalties_smooth.R")
source("../function/make_plot.R")
d2 <- read.csv("../data/processed/a.csv")
plot(d2$r)
plot(d2$y)
lambda = 10
ridge_r <- get_r(d2$iwt, d2$y, lambda)
length(d2$iwt)
ridge_cv <- CV(W, Y)
ridge_cv <- CV(W, Y)
ridge_cv <- CV(W, Y)
### Function: Build the n-1 by n difference matrix
build_D <- function(dat_length){
D = diag(dat_length)
D[row(D) == col(D)-1] = -1
D = D[1:(nrow(D)-1),]
return(D)
}
### Function: calculate ridge regression from closed-form solution
### Input: vector of iwt and incidence
### Return: Rt estimate
get_r <- function(W, Y, lambda=10){
dat_length = length(Y)
D = build_D(dat_length)
W = diag(W)
return(solve((t(W)%*%W-lambda*t(D)%*%D))%*%t(W)%*%Y)
}
### Get Loss function value
get_loss <- function(W, Y, r, lambda){
dat_length = length(Y)
D = build_D(dat_length)
W = diag(W)
loss = sum((Y-W%*%r)^2) + lambda*sum((D%*%r)^2)
return(loss)
}
### Function:
### To be able to call this directly, dat_length, W, D, I has to be
### initialized every time
get_score <- function(W, Y, lambda){
dat_length = length(Y)
W = diag(W)
D = build_D(dat_length)
I = diag(rep(1, dat_length))
L = solve((t(W)%*%W-lambda*t(D)%*%D))%*%t(W)
H = I-t(L)%*%W
H_tilde = diag(diag(H))
HHY = H%*%solve(H_tilde)%*%Y
E_cv = 1/(dat_length)*sum(HHY^2)
return(E_cv)
}
### Function: LOOCV for ridge regression
### Input: vector of iwt and incidence
### Return: score and lambda from best (lowest score) to worst
CV <- function(W, Y, lambdas = exp(seq(0.1,10,0.2))){
### Get grid of lambda
cv_scores = c()
## Loop through all possible lambdas
for (lambda in lambdas){
E_cv = get_score(W, Y, lambda)
cv_scores = c(cv_scores, E_cv)
}
## Sort the lambda based on size of cv_scores
output = list()
ordered = order(cv_scores)
lambdas = lambdas[ordered]
### Return data frame of sorted cv_scores and lambdas
return(data.frame(scores = cv_scores[ordered], lambdas = lambdas[ordered]))
}
ridge_cv <- CV(W, Y)
ridge_cv <- CV(d2$iwt, d2$y)
ridge_cv <- CV(d2$iwt, d2$y)
### Function: Build the n-1 by n difference matrix
build_D <- function(dat_length){
D = diag(dat_length)
D[row(D) == col(D)-1] = -1
D = D[1:(nrow(D)-1),]
return(D)
}
### Function: calculate ridge regression from closed-form solution
### Input: vector of iwt and incidence
### Return: Rt estimate
get_r <- function(W, Y, lambda=10){
dat_length = length(Y)
D = build_D(dat_length)
W = diag(W)
return(solve((t(W)%*%W-lambda*t(D)%*%D))%*%t(W)%*%Y)
}
### Get Loss function value
get_loss <- function(W, Y, r, lambda){
dat_length = length(Y)
D = build_D(dat_length)
W = diag(W)
loss = sum((Y-W%*%r)^2) + lambda*sum((D%*%r)^2)
return(loss)
}
### Function:
### To be able to call this directly, dat_length, W, D, I has to be
### initialized every time
get_score <- function(W, Y, lambda){
dat_length = length(Y)
W = diag(W)
D = build_D(dat_length)
I = diag(rep(1, dat_length))
print(dim(W))
print(dim(D))
print(dim(Y))
L = solve((t(W)%*%W-lambda*t(D)%*%D))%*%t(W)
H = I-t(L)%*%W
H_tilde = diag(diag(H))
HHY = H%*%solve(H_tilde)%*%Y
E_cv = 1/(dat_length)*sum(HHY^2)
return(E_cv)
}
### Function: LOOCV for ridge regression
### Input: vector of iwt and incidence
### Return: score and lambda from best (lowest score) to worst
CV <- function(W, Y, lambdas = exp(seq(0.1,10,0.2))){
### Get grid of lambda
cv_scores = c()
## Loop through all possible lambdas
for (lambda in lambdas){
E_cv = get_score(W, Y, lambda)
cv_scores = c(cv_scores, E_cv)
}
## Sort the lambda based on size of cv_scores
output = list()
ordered = order(cv_scores)
lambdas = lambdas[ordered]
### Return data frame of sorted cv_scores and lambdas
return(data.frame(scores = cv_scores[ordered], lambdas = lambdas[ordered]))
}
ridge_cv <- CV(d2$iwt, d2$y)
?log
tran <- discrete_time(
function(x, s, sdlog, ...){
snext <- rlnorm(1, meanlog = log(s), sdlog = sdlog)
xnext <- rlnorm(1, meanlog = log(x), sdlog = snext)
c(x = xnext, s = snext)
},
delta.t = 1
)
library("pomp")
source("constant/constant.R")
setwd("~/Desktop/School/research/covid_rt_comparison/")
library("pomp")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
tran <- discrete_time(
function(x, s, sdlog, ...){
snext <- rlnorm(1, meanlog = log(s), sdlog = sdlog)
xnext <- rlnorm(1, meanlog = log(x), sdlog = snext)
c(x = xnext, s = snext)
},
delta.t = 1
)
eas_pois_interval <- function(t, x, s, T, Y, y, g_shape, g_scale, ..., log){
if(t > 1){
lambda = x[1] * sum(Y[(t-1):1] * disc_gamma(1:(t-1), shape = g_shape, scale = g_scale))
y*log(lambda)-lambda
}else{
dpois(round(y), lambda = 1)
}
}
d4<- read.csv("data/processed/d4.csv")
plot(d4$y)
plot(d4$r)
init_vals = c(sdlog = 0.1,
g_shape = sid_covid_shape, g_scale = sid_covid_scale)
pf <- pfilter(
Np=1000,
times = "idx",
t0 = 1,
data = d4,
params = init_vals,
rinit = function(x0, ...){c(x=1, s = 0.05)},
rprocess = tran,
dmeasure = meas_pois_interval,
T=t,
Y = d4$y,
statenames = c("x", "s"),
filter.mean = TRUE,
filter.traj = TRUE,
# pred.mean = TRUE,
# pred.var = TRUE,
)
library("pomp")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
### Transition equation
tran <- discrete_time(
function(x, s, sdlog, ...){
snext <- rlnorm(1, meanlog = log(s), sdlog = sdlog)
xnext <- rlnorm(1, meanlog = log(x), sdlog = snext)
c(x = xnext, s = snext)
},
delta.t = 1
)
### Observation equation
meas_pois_interval <- function(t, x, s, T, Y, y, g_shape, g_scale, ..., log){
if(t > 1){
lambda = x[1] * sum(Y[(t-1):1] * disc_gamma(1:(t-1), shape = g_shape, scale = g_scale))
y*log(lambda)-lambda
}else{
dpois(round(y), lambda = 1)
}
}
### Synthetic data import
d4<- read.csv("data/processed/d4.csv")
plot(d4$y)
plot(d4$r)
### Initial values
init_vals = c(sdlog = 0.1,
g_shape = sid_covid_shape, g_scale = sid_covid_scale)
### Run particle filter default
pf <- pfilter(
Np=1000,
times = "idx",
t0 = 1,
data = d4,
params = init_vals,
rinit = function(x0, ...){c(x=1, s = 0.05)},
rprocess = tran,
dmeasure = meas_pois_interval,
T=t,
Y = d4$y,
statenames = c("x", "s"),
filter.mean = TRUE,
filter.traj = TRUE,
# pred.mean = TRUE,
# pred.var = TRUE,
)
plot(pf)
### Make comparison plot
result = as.data.frame(pf)
ggplot(data=data.frame(idx = d4$idx, true= d4$r, pred = result$filter.mean.x), aes(x=idx))+
geom_line(aes(x = idx, y = true), color="blue")+
geom_line(aes(x=idx, y = pred), color = "red")
diag_pf = diag_plots(d4$r, result$r, d4$iwt, d4$y, cap=0)
diag_pf$rt
diag_pf$oneday
diag_pf$rt
diag_pf$oneday
diag_pf = diag_plots(d4$r, result$r, d4$iwt, d4$y, cap=10)
diag_pf$rt
diag_pf$oneday
diag_pf = diag_plots(d4$r, result$r, d4$iwt, d4$y, cap=0)
diag_pf$rt
diag_pf$oneday
ggplot(data=data.frame(idx = d4$idx, true= d4$r, pred = result$filter.mean.x), aes(x=idx))+
geom_line(aes(x = idx, y = true), color="blue")+
geom_line(aes(x=idx, y = pred), color = "red")+
theme_bw()
diag_pf$oneday
plot(pf)
plot(result$filter.mean.s, type = "l")
library("tidyverse")
library("dplyr")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
library("tidyverse")
library("dplyr")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
library("tidyverse")
library("dplyr")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing dataset
d = read.csv("data/processed/d2")
library("tidyverse")
library("dplyr")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing dataset
d = read.csv("data/processed/d2.csv")
plot(d$y)
plot(d$r)
library("tidyverse")
library("dplyr")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing dataset
d = read.csv("data/processed/d2.csv")
plot(d$y)
plot(d$r)
library("tidyverse")
library("dplyr")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing dataset
d = read.csv("data/processed/d2.csv")
plot(d$y, type = "l")
plot(d$r, type = "l")
library("tidyverse")
library("dplyr")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing Rt estimation pacakges
library(EpiEstim)
source("run/run_EpiEstim.R")
### Importing data, no cyclic effect
d = read.csv("data/processed/d2.csv")
plot(d$y, type = "l")
plot(d$r, type = "l")
### Run methods
library("tidyverse")
library("dplyr")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing Rt estimation pacakges
library(EpiEstim)
source("run/run_EpiEstim.R")
### Importing data, no cyclic effect
d = read.csv("data/processed/d2.csv")
plot(d$y, type = "l")
plot(d$r, type = "l")
### Run methods
library("tidyverse")
library("dplyr")
source("constant/constant.R")
source("function/disc_gamma.R")
source("function/make_plot.R")
source("model/pls/ridge.R")
### Importing Rt estimation pacakges
library(EpiEstim)
source("run/run_EpiEstim.R")
epiestim <- run_epiestim(d, p1 = sid_covid_mean, p2 = sid_covid_sd)
plot(epiestim)
plot(epiestim$`Median(R)`)
